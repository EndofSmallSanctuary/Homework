---  
- hosts: localgroup
  become: no
  gather_facts: no
  connection: local
  tasks:
    - name: generate SSH key "{{ssh_key_filename}}" localy!!
      user:
        name: "{{ansible_user}}"
        generate_ssh_key: yes
        ssh_key_type: rsa
        ssh_key_bits: 4096
        ssh_key_file: .ssh/{{ssh_key_filename}}
        force: no


- hosts: homegroup
  become: yes
  gather_facts: yes

  vars:     
    file_id: 1XFZTZ76lJcRgYGa1DjGLA8Wo6GtgcRYz
    ssl_organization_name: flask
    ssl_email: flask@mail.com
    ssl_common_name: flask_common_name
    lines_to_replace:
    - { regexp: "^(.*)#HostbasedAuthentication(.*)$", line: "HostbasedAuthentication no" }
    - { regexp: "^(.*)ChallengeResponceAuthentication(.*)$", line: "ChallengeResponceAuthentication no" }
    - { regexp: "^(.*)PubkeyAuthentication(.*)$", line: "PubkeyAuthentication yes" }
    - { regexp: "^(.*)PasswordAuthentication(.*)$", line: "PasswordAuthentication no" }
    - { regexp: "^(.*)KerberosAuthentication(.*)$", line: "KerberosAuthentication no" }
    - { regexp: "^(.*)GSSAPIAuthentication(.*)$", line: "GSSAPIAuthentication no" }
    - { regexp: "^(.*)PermitRootLogin(.*)$", line: "PermitRootLogin no" }


  handlers:

  - name: service_installed 
    systemd: 
      name: "{{project_name}}"
      daemon-reload: yes
      enabled: yes

  - name: sshd_changed
    service:
      name: sshd
      state: restarted    

  tasks:

#Essentials

  - name: install updates
    apt: 
      upgrade: dist
      state: latest
      update_cache: yes
    

  - name: git & pip install
    apt:
      name: 
        - git
        - python3-pip
        - python3-venv
        - ufw
        - curl
      state: latest
      update_cache: yes

  - name: remove python < 3
    apt:
      name: python2.7-minimal
      state: absent 
      purge: yes    

  - name: install pip packets
    pip:
      name: 
        - pip
        - flask
        - emoji
        - cryptography
        - pyOpenSSL
      executable: pip3  
      state: latest

#Project folder deploy

  - name: create directory with parent directories
    file:
      path: "{{project_path}}"
      state: directory


  - name: download project archive from google drive
    get_url:
      url: "https://drive.google.com/uc?export=download&id={{ file_id }}"
      dest: "{{project_path}}/Flask.zip"
      force: no
      mode: u=r,g-r,o=r

    
  - name: unarchive project remote
    unarchive:
      src: "{{project_path}}/Flask.zip"
      dest: "{{project_path}}"
      remote_src: yes

  - name: remove zip, which is no longed needed 
    file:
      path: "{{project_path}}/Flask.zip"
      state: absent

#Preparing service

  - name: generate service file from template 
    template:
      src: "{{project_name}}_service.j2"
      dest: "/etc/systemd/system/{{project_name}}.service"
    notify: service_installed    

#Ssh section

  - name: install key to remote  
    become: no
    authorized_key:
      user: "{{ansible_user}}"
      state: present
      manage_dir: yes
      key: "{{lookup('file','~/.ssh/{{ssh_key_filename}}.pub')}}"


  - name: say bye to all auth methods (almost)
    replace: 
      path: /etc/ssh/sshd_config
      regexp: "{{item.regexp}}"
      replace: "{{item.line}}"  
    with_items: "{{lines_to_replace}}"      
    notify: sshd_changed

#Achieving http://myvm.localhost pattern    

  - name: rewriting hosts
    lineinfile:
      dest: /etc/hosts
      insertbefore: BOF
      line: "localhost {{ansible_hostname}}.localhost"
      state: present

  - name: rewrite hosts also on launching machine!!
    delegate_to: localhost
    connection: local
    lineinfile:
      dest: /etc/hosts
      insertbefore: BOF
      line: "{{ansible_default_ipv4.address}} {{ansible_hostname}}.localhost"
      state: present


#SSL cert section

  - name: generating ssl key
    openssl_privatekey:
       path: "{{project_path}}/certificate/key.pem"
       cipher: aes256
       passphrase: ''
       backup: yes

  - name: generating ssl csr
    openssl_csr:
        path: "{{project_path}}/certificate/csr.csr"
        privatekey_path: "{{project_path}}/certificate/key.pem"
        country_name: RU
        organization_name: "{{ssl_organization_name}}"
        email_address: "{{ssl_email}}"
        common_name: "{{ssl_common_name}}"

  - name: generating ssl cert
    openssl_certificate:
        path: "{{project_path}}/certificate/cert.pem"
        privatekey_path: "{{project_path}}/certificate/key.pem"
        csr_path: "{{project_path}}/certificate/csr.csr"
        provider: selfsigned


  - name: removing csr
    file:
      path: "{{project_path}}/certificate/csr.csr"
      state: absent   

#Firewall section

  - name: limiting ports
    ufw: 
      policy: deny
      state: enabled 

  - name: opening  port 22
    ufw:
      rule: allow
      name: OpenSSH

  - name: opening ports 80;443
    ufw:
      rule: allow
      name: WWW Full  

#launching app

  - name: launch app
    shell: cd "{{project_path}}" && sudo nohup python3 -u main.py > flasklog.log &



